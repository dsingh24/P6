In this work, we study the benefits of partial evaluation over basic compilation. Partial evaluation refers to the computation of statically available values in a computer program before the program is executed (along with its dynamic input). Today, more and more demand is placed on processors to run large sums of code quickly. Although research is done on the hardware side to optimize how quickly a given program runs, it is also important to research how software can be optimized to correctly execute a program in fewer instructions.

Partial evaluation falls within this research on the software side of the problem. The straightforward benefit of partial evaluation is execution speed, although we determined side benefits. Some of these benefits include code size reduction and reducing the required memory bandwidth. The specialized program obtained as a result of partial evaluation already has the computations dependent on static variables evaluated during compilation. At runtime, this program only executes instructions that are dependent on the original program's dynamic variables. This reduces the number of computations and execution time required during run time.

We study the performance benefits of partially evaluating different applications, starting from a compiler that makes no optimizations. We test partial evaluation on a series of microbenchmarks that demonstrate common mathmatecal oparations done in typical benchmarks. Through partial evaluation alone, we show a significant reduction in execution time, required memory bandwidth, and code size.
